Hard and Soft Skill Extraction from Job Descriptions

1. Objective:

This document provides a detailed protocol based on the analysis of 27 job descriptions (JDs). Its purpose is to instruct an AI system on how to accurately identify, extract, and differentiate between Hard Skills and Soft Skills within unstructured job description text.

2. Core Definitions:

Hard Skills: Specific, teachable, quantifiable, and often technical abilities required to perform a job. They typically relate to tools, technologies, methodologies, technical concepts, or domain-specific knowledge. Examples: Python, React, AWS, SQL, Agile Methodology, Data Analysis, Machine Learning, Project Management (when referring to specific frameworks like PMP or tools).
Soft Skills: Interpersonal, behavioral, cognitive, and character traits related to how an individual works and interacts with others. They are often less tangible, harder to quantify directly, and relate to personality, communication style, work ethic, and attitude. Examples: Communication, Teamwork, Problem-Solving, Leadership, Adaptability, Creativity, Time Management, Critical Thinking.
3. Guiding Principles for AI Extraction:

The AI should utilize a combination of the following approaches:

Linguistic Pattern Recognition: Identifying specific verbs, nouns, adjectives, and trigger phrases.
Structural Analysis: Considering the location of information within the JD (e.g., specific sections like "Qualifications," "Responsibilities," "About You").
Keyword Characteristic Analysis: Differentiating based on the nature of the keyword itself (e.g., proper noun technology vs. abstract noun trait).
Contextual Interpretation: Disambiguating terms based on surrounding text and role expectations (e.g., seniority).
Inference: Deriving skills implied by descriptive text, not just explicitly stated keywords.
4. Detailed Extraction Rules and Patterns:

4.1. Hard Skill Extraction:

Primary Linguistic Triggers: Prioritize extracting nouns or noun phrases (especially proper nouns representing technologies, software, platforms, methodologies, languages, or technical concepts) immediately following these common trigger patterns:

experience with/in/building/using/working with...:
Rule: Extract the specific item(s) listed. If a list follows, extract all items.
Example: "experience building Ruby on Rails applications" -> Extract: Ruby on Rails.
Example: "experience in Scala or similar [Java, Kotlin, C#]" -> Extract: Scala, Java, Kotlin, C#.
Example: "Experience working with major cloud providers such as AWS, Google Cloud, and Azure" -> Extract: AWS, Google Cloud, Azure.
proficient in/with...:
Rule: Extract the specific skill(s) or tool(s) mentioned, often indicating a required competency level.
Example: "Proficiency in Svelte-Kit, Django, Python, SQL..." -> Extract: Svelte-Kit, Django, Python, SQL, etc.
Example: "Proficient in modern JavaScript frameworks... Angular, React..." -> Extract: javascript, angular, react.
knowledge of...:
Rule: Extract technical concepts, tools, domains, or methodologies mentioned.
Example: "knowledge of algorithms, data structures" -> Extract: Algorithms, Data Structures.
Example: "Knowledge of unit test frameworks like Jest..." -> Extract: Jest.
understanding of...:
Rule: Similar to "knowledge of," extract technical concepts, processes, or methodologies.
Example: "Understanding of application and data security" -> Extract: data security.
Example: "Understanding of Agile software development and the scrum framework" -> Extract: agile software development, scrum.
Example: "solid understanding of cloud-native application design" -> Extract: application design, cloud-native.
familiarity with/in...:
Rule: Extract specific technologies, tools, or platforms mentioned, often indicating awareness or basic experience is sufficient.
Example: "Familiarity with containerization... such as Docker, AWS ECS, Kubernetes" -> Extract: docker, kubernetes, AWS ECS, containerization.
Example: "Familiarity in using GitHub Actions..., Docker containers,... Kubernetes" -> Extract: github, docker, kubernetes, CI tools.
skilled in/at...:
Rule: Extract the specific technical capability mentioned.
Example: "skilled in database administration" -> Extract: database administration.
expertise in/with...:
Rule: Extract the specific area of deep knowledge or skill.
Example: "expertise in distributed systems design" -> Extract: Distributed Systems.
strong skills in...:
Rule: While "strong" often modifies soft skills, if followed by a clearly technical term, extract it as a hard skill.
Example: "strong skills in object-oriented programming" -> Extract: object-oriented programming.
Technology Stack Declarations:

Rule: Extract all technologies explicitly listed as part of a "stack" or described as the primary tools used. Look for phrases like "Our stack is...", "tech stack of...", "...powered by...", "using technologies like...".
Example: "...core tech stack of React, Typescript, Html/CSS and Express.js" -> Extract: React, Typescript, Html/CSS, Express.js.
Example: "Our stack is Python/Flask, React/Redux..." -> Extract: Python, Flask, React, Redux, React Native, PostgreSQL.
Structural Location:

Rule: Pay highest attention to bulleted lists and paragraphs within sections explicitly titled: "Qualifications," "Requirements," "Required Skills," "Technical Skills," "Experience," "Your Background," "Must-Haves," "Tech Stack," "Tools We Use."
Rule: Also consider "Nice to Haves," "Preferred Qualifications," or similar sections, potentially tagging these extractions as 'preferred'.
Example: [UofC Software Developer.txt] - Skills listed under "Qualifications / Requirements" are primary hard skill targets.
Keyword Characteristics:

Type: Primarily nouns or noun phrases. Frequently proper nouns (e.g., Java, AWS, Jira).
Nature: Represent concrete tools (e.g., Docker, Git), programming languages (Python, C++), platforms (Azure, Shopify), methodologies (Agile, Scrum, CI/CD), specific technical concepts (Microservices, Data Structures, Machine Learning), or quantifiable domains (Cybersecurity, E-Commerce).
4.2. Soft Skill Extraction:

Primary Linguistic Triggers & Patterns:

Adjective + Noun (Skill/Trait):
Rule: Extract the skill/trait when modified by descriptive adjectives (strong, excellent, good, proven) or standing alone as desired characteristics.
Example: "Strong communication skills" -> Extract: communication skills (or communication).
Example: "Entrepreneurial Mindset" -> Extract: entrepreneurial mindset (or entrepreneurial).
Example: "Analytical and problem solving skills" -> Extract: analytical, problem solving skills.
Example: "Excellent organizational skills" -> Extract: organizational skills.
"Ability to..." + Behavioral Description:
Rule: Extract the core capability described, focusing on interpersonal, cognitive, or work-style actions.
Example: "Ability to work independently" -> Extract: ability to work independently.
Example: "Ability to explain technical problems to non-technical audiences" -> Infer/Extract: communication.
Example: "Ability to manage multiple priorities" -> Extract: time management (or prioritization).
"Passion for..." / "Enthusiasm for..." / "Interest in...":
Rule: While often linked to hard skills/topics, these phrases indicate underlying soft skills like motivation, passion, enthusiasm, curiosity, or drive. Extract the implied trait.
Example: "passion for solving hard technical problems" -> Infer/Extract: problem-solving, motivation.
Example: "passion for using Python" -> Primarily indicates hard skill Python, but secondarily implies passion/enthusiasm. Focus on extracting the core soft skill concept.
Explicit Trait Naming:
Rule: Extract explicitly named traits, mindsets, or values.
Example: "We value collaboration and transparency" -> Extract: collaboration, transparency.
Example: "Requires leadership potential" -> Extract: leadership.
Descriptive Sentences about Behavior/Work Style/Interaction:
Rule: Analyze sentences describing how work is done, how candidates should interact, or desired attitudes. Infer the underlying soft skill.
Example: "communicate clearly and work well with cross-functional teams" -> Extract: communication, collaboration, teamwork.
Example: "...approach challenges with a first-principles mindset..." -> Infer/Extract: problem-solving, analytical thinking, growth mindset.
Example: "...treat each other with compassion and kindness" -> Extract: compassion, kindness, teamwork.
Example: "values open and constructive feedback" -> Extract: constructive feedback, openness to feedback.
Example: "take ownership of your work" -> Extract: ownership, accountability, initiative.
Example: "eagerness to learn" -> Extract: eagerness to learn, continual learning, curiosity.
Structural Location:

Rule: Look within sections titled: "Who You Are," "About You," "What We're Looking For," "Responsibilities" (focus on how tasks are performed), "Company Culture," "Team Values," narrative paragraphs describing the ideal candidate or team environment.
Example: [Rokt Software Engineer.txt] - "Who You Are" section lists AI-Enthusiast & Quick Learner, Problem Solver, Entrepreneurial Mindset, Collaborative Team Player.
Keyword Characteristics:

Type: Frequently adjectives (collaborative, analytical, motivated), abstract nouns (collaboration, communication, leadership, creativity), or noun phrases describing traits/abilities (problem solver, growth mindset, attention to detail, time management).
Nature: Represent interpersonal abilities (e.g., communication, teamwork), work ethic/approach (e.g., ownership, proactive, adaptable), cognitive processes (e.g., analytical, critical thinking), and personality traits (e.g., empathy, resilience).
4.3. Handling Ambiguity & Context:

Context-Dependent Keywords: Certain terms require contextual analysis.

Management:
Hard Skill: When referring to specific systems, tools, or processes (e.g., "source control management," "database management," "project management software").
Soft Skill: When referring to people, projects broadly, or leadership roles (e.g., "engineering management," "team management," "project management skills" - often implies organization/leadership). Prioritize soft skill classification unless a specific tool/system is named.
Design:
Hard Skill: When referring to technical specifications, patterns, tools, or specific fields (e.g., "system design," "API design," "design patterns," "UX/UI design," "software design," "product design").
Soft Skill: When referring to the act or ability to conceptualize, plan, or think architecturally (e.g., "how you design systems," "contribute to design discussions" - implies problem-solving, creativity, architectural thinking).
Leadership:
Soft Skill: Almost always a soft skill, indicating guidance, mentorship, influence, vision-setting.
Example: "provide technical leadership," "leadership opportunities," "lead projects."
Analytical:
Hard Skill: When referring to specific techniques or tools (e.g., "data analytics," "statistical analysis," "quantitative analysis," specific analysis software).
Soft Skill: When referring to the general cognitive ability to think critically, break down problems, and use logic/reasoning (e.g., "analytical skills," "analytical mindset," "analytical and problem-solving skills"). Prioritize soft skill classification unless specific technical methods are mentioned.
Testing:
Hard Skill: When referring to specific methodologies or tools (e.g., Unit Testing, Automated Testing, Jest, Selenium, Test Driven Development).
Soft Skill (Implicit): Often related to Attention to Detail or Quality Focus. Extract the specific hard skill first.
Role Seniority Correlation:

Rule: Adjust expectations based on role level.
Junior/Intermediate: Expect a higher density of specific technical hard skills and foundational soft skills (collaboration, communication, willingness to learn).
Senior/Staff: Expect deep technical hard skills plus soft skills related to mentorship, technical leadership, ownership, strategic thinking, complex problem-solving.
Lead/Manager: Expect fewer hands-on technical hard skills (though some may be present) and a strong emphasis on soft skills like leadership, coaching, mentoring, strategic planning, communication, people management, conflict resolution.
Required vs. Preferred:

Rule: If the JD clearly delineates between "Required" and "Preferred" (or "Nice to Have," "Bonus Points"), attempt to tag the extracted skill accordingly (e.g., Python (Required), Kubernetes (Preferred)). If not clearly delineated, assume required unless context strongly suggests otherwise (e.g., phrases like "a plus if you know...").
4.4. Explicit vs. Inferred Skills:

Explicit Extraction:
Rule: Directly extract keywords or close variants present in the text, especially following trigger phrases or in lists.
Example: "Experience with Python" -> Extract: Python (Hard).
Example: "strong communication skills" -> Extract: communication skills (Soft).
Inferred Extraction:
Rule: Identify concepts implied by descriptive text and map them to standardized skill terms. Document the inference logic where possible.
Example: "work collaboratively and proactively with your team" -> Infer: collaboration, proactive (Soft). (Logic: Describes working with others and taking initiative).
Example: "excel at breaking down complex problems" -> Infer: problem-solving (Soft). (Logic: Describes analyzing difficulties).
Example: "eagerness to learn about X" -> Infer: continual learning, curiosity (Soft). (Logic: Describes desire for knowledge).
Example: "take ownership of driving improvements" -> Infer: ownership, initiative, motivated (Soft). (Logic: Describes self-direction).
Example: "responding well to design and code feedback" -> Infer: receptive to feedback, coachability (Soft).
4.5. Normalization and Variation Handling:

Initial Extraction Rule: Extract terms largely as they appear in the text, including variations in phrasing, capitalization, and hyphenation. Minimal normalization (e.g., lowercasing) is acceptable, but retain distinct phrasings initially.
Example: Extract software development life cycle, System Development Lifecycle, and SDLC as separate items if they appear distinctly.
Example: Extract AI, AI/ML, machine learning, artificial intelligence separately.
Rationale: This preserves the original nuance and allows for potential downstream normalization as a separate task if required. The goal of this phase is accurate identification and categorization based on the source text.
Potential Future Step (Not primary instruction): A post-processing step could map these variants to canonical forms (e.g., all lifecycle variants map to SDLC; all AI variants map to Artificial Intelligence / Machine Learning).
5. Output Format Specification:

The AI should output the extracted skills into two distinct lists:

Hard Skills: A list of all identified hard skill keywords/phrases.
Soft Skills: A list of all identified or inferred soft skill keywords/phrases.
Optional Enhancements to Output (If feasible):

Include the source sentence or context snippet for each extracted skill to aid verification.
Include the tag (e.g., 'Required', 'Preferred') if identifiable.
Include confidence score if the model generates one.
6. Summary of Core AI Instructions:

Prioritize Trigger Phrases: Focus intensely on extracting nouns/phrases following key indicators like "experience with," "proficient in," "knowledge of," etc., for hard skills.
Leverage Structural Clues: Give high weight to skills listed in "Qualifications," "Requirements," "Skills," and "Tech Stack" sections for hard skills. Look in "Who You Are," "About You," and behavioral descriptions for soft skills.
Analyze Word Type: Classify proper nouns for technologies/tools as hard skills. Classify adjectives describing traits and abstract nouns for behaviors/qualities as soft skills.
Interpret Behavior: Infer soft skills from descriptions of how work is done, interaction styles, and attitudes (e.g., teamwork, problem-solving approach, learning).
Use Context: Disambiguate terms like "management," "design," "analytical" based on surrounding words and role expectations. Factor in role seniority.
Extract Literally: Capture keyword variations as found in the text initially. Do not aggressively normalize in the primary extraction phase.
Differentiate Clearly: Adhere strictly to the definitions of Hard Skills (technical, teachable, tools/knowledge) and Soft Skills (interpersonal, behavioral, traits).